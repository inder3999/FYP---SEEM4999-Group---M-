from platypus import EpsMOEA, Problem, Integer
import time
start_time = time.time()

def belegundu(vars):
 x1 = vars[0]
 x2 = vars[1]
 x3 = vars[2]
 x4 = vars[3]
 x5 = vars[4]
 x6 = vars[5]
 x7 = vars[6]
 return [31*x1 + 38*x2 + 19*x3 + 37*x4 + 45*x5 + 23*x6 + 23*x7, 27*x1 + 35*x2 + 74*x3 + 62*x4 + 22*x5 + 27*x6 + 33*x7, 61*x1 + 56*x2 + 55*x3 + 84.6*x4 + 65*x5 + 73*x6 + 62*x7], [x1 + x2 + x3 + x4 + x5 + x6 + x7 - 1, x1 - 1, x2 - 1, x3 - 1, x4 - 1, x5 -1, x6 - 1, x7 - 1, x1 - 0, x2 - 0, x3 - 0, x4 - 0, x5 - 0, x6 - 0, x7 - 0]

problem = Problem(7, 3, 15)
problem.types[:] = [Integer(0, 1), Integer(0, 1), Integer(0, 1), Integer(0, 1), Integer(0, 1), Integer(0, 1), Integer(0, 1)]
problem.constraints[:] = ["==0", "<=0", "<=0", "<=0", "<=0", "<=0", "<=0", "<=0", ">=0", ">=0", ">=0", ">=0", ">=0", ">=0", ">=0"]
problem.function = belegundu
algorithm = EpsMOEA(problem, epsilons = 0.05)
algorithm.run(10000)
feasible_solutions = [s for s in algorithm.result if s.feasible]

# display the results
for solution in algorithm.result:
    print(solution.objectives)

if __name__ == "__main__":
 print("--- %s seconds ---" % (time.time() - start_time))
