import autograd.numpy as anp
import numpy as np
from pymoo.util.misc import stack
from pymoo.model.problem import Problem
from pymoo.algorithms.so_genetic_algorithm import GA
from pymoo.factory import get_sampling, get_crossover, get_mutation
from pymoo.optimize import minimize

import time
start_time = time.time()
for w1 in np.arange(0, 1, 0.05):
 for w2 in np.arange(0, 1, 0.05):
  w3 = 1 - w2 - w1
  if (w1 + w2 + w3 == 1 and w3 >= 0):
   class MyProblem(Problem):
    def __init__(self):
     super().__init__(n_var=7,  n_obj=1, n_constr=2, xl=anp.array([0,0,0,0,0,0,0]),  xu=anp.array([1,1,1,1,1,1,1]))
    def _evaluate(self, x, out, *args, **kwargs):  
     f1 = w1*(31*x[:,0] + 38*x[:,1] + 19*x[:,2] + 37*x[:,3] + 45*x[:,4] + 23*x[:,5] + 23*x[:,6]) + w2*(27*x[:,0] + 35*x[:,1] + 74*x[:,2] + 62*x[:,3] + 22*x[:,4] + 27*x[:,5] + 33*x[:,6]) + w3*(61*x[:,0] + 56*x[:,1] + 55*x[:,2] + 84.6*x[:,3] + 65*x[:,4] + 73*x[:,5] + 62*x[:,6])
     g1 = x[:,0] + x[:,1] + x[:,2] + x[:,3] + x[:,4] + x[:,5] + x[:,6] - 1
     g2 = 1 - x[:,0] - x[:,1] - x[:,2] - x[:,3] - x[:,4] - x[:,5] - x[:,6]
     out["F"] = anp.column_stack([f1])
     out["G"] = anp.column_stack([g1, g2])
   problem = MyProblem()
   algorithm = GA(pop_size=20, sampling=get_sampling("bin_random"), crossover=get_crossover("bin_hux"), mutation=get_mutation("bin_bitflip"),  eliminate_duplicates=True)
   res = minimize(problem, algorithm, ('n_gen', 10), verbose=False)
   print("Best solution found: %s" % res.X.astype(np.int))
   print("Function value: %s" % res.F)
   print("Constraint violation: %s" % res.CV)

if __name__ == "__main__":
 print("--- %s seconds ---" % (time.time() - start_time))
